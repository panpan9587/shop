// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package server

import (
	"context"

	"demo/user-srv/internal/logic"
	"demo/user-srv/internal/svc"
	"demo/user-srv/user"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

// 查询用户是否存在
func (s *UserServer) GetUser(ctx context.Context, in *user.GetUserRequest) (*user.GetUserResponse, error) {
	l := logic.NewGetUserLogic(ctx, s.svcCtx)
	return l.GetUser(in)
}

// 修改用户密码
func (s *UserServer) UpdateUserPwd(ctx context.Context, in *user.UpdateUserPwdRequest) (*user.UpdateUserPwdResponse, error) {
	l := logic.NewUpdateUserPwdLogic(ctx, s.svcCtx)
	return l.UpdateUserPwd(in)
}

// 登录接口
func (s *UserServer) LoginUser(ctx context.Context, in *user.LoginUserRequest) (*user.LoginUserResponse, error) {
	l := logic.NewLoginUserLogic(ctx, s.svcCtx)
	return l.LoginUser(in)
}

// 绑定手机号
func (s *UserServer) BindMobile(ctx context.Context, in *user.BindMobileRequest) (*user.BindMobileResponse, error) {
	l := logic.NewBindMobileLogic(ctx, s.svcCtx)
	return l.BindMobile(in)
}

// 实名认证
func (s *UserServer) IdentityUser(ctx context.Context, in *user.IdentityUserRequest) (*user.IdentityUserResponse, error) {
	l := logic.NewIdentityUserLogic(ctx, s.svcCtx)
	return l.IdentityUser(in)
}
