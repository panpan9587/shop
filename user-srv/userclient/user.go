// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userclient

import (
	"context"

	"demo/user-srv/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BindMobileRequest     = user.BindMobileRequest
	BindMobileResponse    = user.BindMobileResponse
	GetUserRequest        = user.GetUserRequest
	GetUserResponse       = user.GetUserResponse
	IdentityUserRequest   = user.IdentityUserRequest
	IdentityUserResponse  = user.IdentityUserResponse
	LoginUserRequest      = user.LoginUserRequest
	LoginUserResponse     = user.LoginUserResponse
	UpdateUserPwdRequest  = user.UpdateUserPwdRequest
	UpdateUserPwdResponse = user.UpdateUserPwdResponse

	User interface {
		// 查询用户是否存在
		GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
		// 修改用户密码
		UpdateUserPwd(ctx context.Context, in *UpdateUserPwdRequest, opts ...grpc.CallOption) (*UpdateUserPwdResponse, error)
		// 登录接口
		LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
		// 绑定手机号
		BindMobile(ctx context.Context, in *BindMobileRequest, opts ...grpc.CallOption) (*BindMobileResponse, error)
		// 实名认证
		IdentityUser(ctx context.Context, in *IdentityUserRequest, opts ...grpc.CallOption) (*IdentityUserResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// 查询用户是否存在
func (m *defaultUser) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

// 修改用户密码
func (m *defaultUser) UpdateUserPwd(ctx context.Context, in *UpdateUserPwdRequest, opts ...grpc.CallOption) (*UpdateUserPwdResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UpdateUserPwd(ctx, in, opts...)
}

// 登录接口
func (m *defaultUser) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.LoginUser(ctx, in, opts...)
}

// 绑定手机号
func (m *defaultUser) BindMobile(ctx context.Context, in *BindMobileRequest, opts ...grpc.CallOption) (*BindMobileResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.BindMobile(ctx, in, opts...)
}

// 实名认证
func (m *defaultUser) IdentityUser(ctx context.Context, in *IdentityUserRequest, opts ...grpc.CallOption) (*IdentityUserResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.IdentityUser(ctx, in, opts...)
}
